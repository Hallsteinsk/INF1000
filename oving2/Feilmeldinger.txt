Oppgave 2.4
a) En kompileringsfeil er en feil som oppstår mens koden blir kompilert til maskinkode. Feil som oppstår her, kommer av at compileren ikke skjønner hva du har skrevet fordi man har brutt reglene til programeringsspråket. Dette dreier seg ofte om syntaksfeil, og feil med type-missmatching. Allegorisk kan man si at dette er gramatiske feil i et vanlig språk. 

Kjørefeil oppstår først mens man kjører programmet. Det er ikke en direkte feil med språket i koden, men programmet prøver å gjøre noe som er vanskelig/umulig. Dersom programmet mottar input fra en bruker, kan feil oppstå dersom bruker gir "ulovlige" verdier. F.eks at man skriver inn en char i stedet for en int. Gjør programmet divisjon, og en bruker deler på null, kan man få kjørefeil. Hvis programmet skal åpne en fil eller nettside som ikke eksisterer kan man også få feil. Man kan sikkert også få feil, dersom maskinen går tom for minne, eller at man har pekere til ulovlige eller ikke-eksisterende adresser. 

b) Den første feilmeldingen sier at compileren forventer en class, interface eller enum. I tillegg peker den på Class.Feilmeldinger{}. Da har man tydeligvis ikke deffinert en ny klasse. Trolig er dette fordi man har skrevet Class med stor C. Den andre feilmeldingen peker på "void". Alle metoder i java må være deffinert inne i en klasse, og siden vi ikke har fått noen klasse enda, kan vi heller ikke ha en main metode. Sånn sett er det ikke noe direkte syntaksielt feil med main metoden, men den har ikke lov til å være for seg selv utenfor en klasse. Endrer vi Class Feilmeldinger{} til class Feilmeldinger{} burde begge disse feilmeldingene forsvinne. 

c) Denne feilmeldingen sier at compileren forventer en ";" på slutten av System.out.println("Velkommen til feilmeldinger!"). Man har trolig glemt en semikolon der da.   